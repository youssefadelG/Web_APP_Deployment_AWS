name: CI/CD Pipeline to automate EKS provisioning & Flask app deployment
permissions:
    contents: read
    id-token: write


on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

jobs:
    EKS-Setup:
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4
            
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
                aws-region: us-east-1
            
            - name: Check Identity
              run: |
                aws sts get-caller-identity
            
            - name: Install Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: 1.10.1
            
            - name: Terraform Initialization
              id: terraform_init
              run: |
                cd IaC
                terraform init
            
            - name: Terraform Backend reconfigure
              if: ${{ steps.terraform_init.outcome == 'failure' }}
              run: |
                cd IaC
                terraform init -reconfigure
            
            - name: Terraform Plan
              run: |
                cd IaC
                terraform plan
            
            - name: Terraform Apply
              run: |
                cd IaC
                terraform apply -auto-approve
    
    BuildImage-and-Publish-to-DockerHub:
        runs-on: ubuntu-latest
        needs: EKS-Setup
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Log in to Docker Hub
              uses: docker/login-action@v1
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Build and push Docker image
              run: |
                docker build -t flaskapp:dev -f microservices/Dockerfile microservices/
                docker tag flaskapp:dev ${{ secrets.DOCKERHUB_REPO }}/flaskapp:dev
                docker push ${{ secrets.DOCKERHUB_REPO }}/flaskapp:dev

    Deploy-to-EKS:
        runs-on: ubuntu-latest
        needs: BuildImage-and-Publish-to-DockerHub
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install kubectl
              run: |
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x ./kubectl
                sudo mv ./kubectl /usr/local/bin/kubectl
            
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
                aws-region: us-east-1
            
            - name: Check kubectl version
              run: |
                kubectl version --client
            
            - name: Download kubeconfig file
              run: |
                aws eks update-kubeconfig --name app_eks --region us-east-1
                echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV
                cat $KUBECONFIG
            
            - name: Install Helm
              run: |
                curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            
            - name: Add Helm repository for Prometheus
              run: |
                helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                helm repo update

            - name: Add Helm repository
              run: |
                helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
                --namespace monitoring --create-namespace \
                --set grafana.enabled=true \
                --set grafana.service.type=LoadBalancer \
                --set prometheus.service.type=LoadBalancer \
                --set alertmanager.enabled=false \
                --set kubeStateMetrics.enabled=true \
                --set nodeExporter.enabled=true

            - name: Deploy Flask app to EKS
              run: |
                kubectl apply -f eks_deploy/deployment.yaml
                kubectl apply -f eks_deploy/loadbalancer.yaml
                kubectl apply -f eks_deploy/appmonitor.yaml
            
            - name: Confirm Deployment
              id: confirm_deployment
              run: |
                kubectl rollout status deployment/flask-app-dev
            
            - name: Rollback in case of Deployment failure
              if: ${{ steps.confirm_deployment.outcome == 'failure' }}
              run: |
                echo "Deployment failed!! Rolling back..."
                kubectl rollout undo deployment/flask-app-dev